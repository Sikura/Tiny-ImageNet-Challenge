{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading 10 classes\n",
      "loading training images...\n",
      "loading test images...\n",
      "X_train shape: (5000, 64, 64, 3)\n",
      "5000 train samples\n",
      "500 test samples\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Program Files\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:144: UserWarning: Update your `BatchNormalization` call to the Keras 2 API: `BatchNormalization(epsilon=1e-06, axis=1, momentum=0.9)`\n",
      "C:\\Program Files\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:148: UserWarning: Update your `BatchNormalization` call to the Keras 2 API: `BatchNormalization(epsilon=1e-06, axis=1, momentum=0.9)`\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "===========================\n",
      "Testing: with loss function hinge\n",
      "===========================\n",
      "\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "conv2d_31 (Conv2D)           (None, 64, 64, 32)        2432      \n",
      "_________________________________________________________________\n",
      "batch_normalization_22 (Batc (None, 64, 64, 32)        256       \n",
      "_________________________________________________________________\n",
      "max_pooling2d_14 (MaxPooling (None, 32, 32, 32)        0         \n",
      "_________________________________________________________________\n",
      "conv2d_32 (Conv2D)           (None, 32, 32, 32)        9248      \n",
      "_________________________________________________________________\n",
      "batch_normalization_23 (Batc (None, 32, 32, 32)        128       \n",
      "_________________________________________________________________\n",
      "flatten_9 (Flatten)          (None, 32768)             0         \n",
      "_________________________________________________________________\n",
      "dense_17 (Dense)             (None, 128)               4194432   \n",
      "_________________________________________________________________\n",
      "dropout_9 (Dropout)          (None, 128)               0         \n",
      "_________________________________________________________________\n",
      "dense_18 (Dense)             (None, 10)                1290      \n",
      "=================================================================\n",
      "Total params: 4,207,786\n",
      "Trainable params: 4,207,594\n",
      "Non-trainable params: 192\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Program Files\\Anaconda3\\lib\\site-packages\\keras\\models.py:944: UserWarning: The `nb_epoch` argument in `fit` has been renamed `epochs`.\n",
      "  warnings.warn('The `nb_epoch` argument in `fit` '\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 5000 samples, validate on 500 samples\n",
      "Epoch 1/10\n",
      "5000/5000 [==============================] - 78s 16ms/step - loss: 7.8793 - acc: 0.0960 - val_loss: 14.5063 - val_acc: 0.1000\n",
      "Epoch 2/10\n",
      "5000/5000 [==============================] - 76s 15ms/step - loss: 14.4665 - acc: 0.1000 - val_loss: 14.5063 - val_acc: 0.1000\n",
      "Epoch 3/10\n",
      "5000/5000 [==============================] - 76s 15ms/step - loss: 14.5500 - acc: 0.0958 - val_loss: 14.5063 - val_acc: 0.1000\n",
      "Epoch 4/10\n",
      "5000/5000 [==============================] - 77s 15ms/step - loss: 14.4951 - acc: 0.0994 - val_loss: 14.5063 - val_acc: 0.1000\n",
      "Epoch 5/10\n",
      "5000/5000 [==============================] - 76s 15ms/step - loss: 14.4471 - acc: 0.1028 - val_loss: 14.5063 - val_acc: 0.1000\n",
      "Epoch 6/10\n",
      "5000/5000 [==============================] - 76s 15ms/step - loss: 14.5692 - acc: 0.0952 - val_loss: 14.5063 - val_acc: 0.1000\n",
      "Epoch 7/10\n",
      "5000/5000 [==============================] - 76s 15ms/step - loss: 14.5404 - acc: 0.0966 - val_loss: 14.5063 - val_acc: 0.1000\n",
      "Epoch 8/10\n",
      "5000/5000 [==============================] - 77s 15ms/step - loss: 14.5066 - acc: 0.0994 - val_loss: 14.5063 - val_acc: 0.1000\n",
      "Epoch 9/10\n",
      "5000/5000 [==============================] - 77s 15ms/step - loss: 14.5111 - acc: 0.0990 - val_loss: 14.5063 - val_acc: 0.1000\n",
      "Epoch 10/10\n",
      "5000/5000 [==============================] - 77s 15ms/step - loss: 14.5025 - acc: 0.1000 - val_loss: 14.5063 - val_acc: 0.1000\n",
      "500/500 [==============================] - 4s 8ms/step\n",
      "Test score: 14.50628589630127\n",
      "Test accuracy: 0.10000000002980232\n"
     ]
    }
   ],
   "source": [
    "# load the val annotations file\n",
    "\n",
    "import os\n",
    "\n",
    "def get_annotations_map():\n",
    "    valAnnotationsPath = './tiny-imagenet-200/val/val_annotations.txt'\n",
    "    valAnnotationsFile = open(valAnnotationsPath, 'r')\n",
    "    valAnnotationsContents = valAnnotationsFile.read()\n",
    "    valAnnotations = {}\n",
    "\n",
    "    for line in valAnnotationsContents.splitlines():\n",
    "        pieces = line.strip().split()\n",
    "        valAnnotations[pieces[0]] = pieces[1]\n",
    "    \n",
    "    return valAnnotations\n",
    "\n",
    "\n",
    "#Sys\n",
    "import numpy as np\n",
    "from PIL import Image\n",
    "\n",
    "\n",
    "def load_images(path,num_classes):\n",
    "    #Load images\n",
    "    \n",
    "    print('Loading ' + str(num_classes) + ' classes')\n",
    "\n",
    "    X_train=np.zeros([num_classes*500,3,64,64],dtype='uint8')\n",
    "    y_train=np.zeros([num_classes*500], dtype='uint8')\n",
    "\n",
    "    trainPath=path+'/train'\n",
    "\n",
    "    print('loading training images...');\n",
    "\n",
    "    i=0\n",
    "    j=0\n",
    "    annotations={}\n",
    "    for sChild in os.listdir(trainPath):\n",
    "        sChildPath = os.path.join(os.path.join(trainPath,sChild),'images')\n",
    "        annotations[sChild]=j\n",
    "        for c in os.listdir(sChildPath):\n",
    "            X=np.array(Image.open(os.path.join(sChildPath,c)))\n",
    "            if len(np.shape(X))==2:\n",
    "                X_train[i]=np.array([X,X,X])\n",
    "            else:\n",
    "                X_train[i]=np.transpose(X,(2,0,1))\n",
    "            y_train[i]=j\n",
    "            i+=1\n",
    "        j+=1\n",
    "        if (j >= num_classes):\n",
    "            break\n",
    "\n",
    "    #print('finished loading training images')\n",
    "\n",
    "    val_annotations_map = get_annotations_map()\n",
    "\n",
    "    X_test = np.zeros([num_classes*50,3,64,64],dtype='uint8')\n",
    "    y_test = np.zeros([num_classes*50], dtype='uint8')\n",
    "\n",
    "\n",
    "    print('loading test images...')\n",
    "\n",
    "    i = 0\n",
    "    testPath=path+'/val/images'\n",
    "    for sChild in os.listdir(testPath):\n",
    "        if val_annotations_map[sChild] in annotations.keys():\n",
    "            sChildPath = os.path.join(testPath, sChild)\n",
    "            X=np.array(Image.open(sChildPath))\n",
    "            if len(np.shape(X))==2:\n",
    "                X_test[i]=np.array([X,X,X])\n",
    "            else:\n",
    "                X_test[i]=np.transpose(X,(2,0,1))\n",
    "            y_test[i]=annotations[val_annotations_map[sChild]]\n",
    "            i+=1\n",
    "        else:\n",
    "            pass\n",
    "\n",
    "\n",
    "   # print('finished loading test images')+str(i)\n",
    "\n",
    "    return X_train,y_train,X_test,y_test\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    import matplotlib.pyplot as plt\n",
    "    \n",
    "    #Keras\n",
    "    import keras\n",
    "    from keras.datasets import mnist\n",
    "    from keras.models import Sequential\n",
    "    from keras.layers import Dense, Dropout\n",
    "    from keras.optimizers import RMSprop\n",
    "    #from keras.regularizers import WeightRegularizer, ActivityRegularizer \n",
    "    from keras.layers.core import Dense, Dropout, Activation, Flatten\n",
    "    from keras.layers.convolutional import Convolution2D, MaxPooling2D, ZeroPadding2D, AveragePooling2D\n",
    "    from keras.layers.normalization import BatchNormalization \n",
    "    from keras.utils import np_utils\n",
    "    from keras.optimizers import SGD\n",
    "    from keras.preprocessing.image import ImageDataGenerator\n",
    "    #from plotter import Plotter\n",
    "    # from keras.utils.visualize_util import plot\n",
    "    import h5py\n",
    "\n",
    "\n",
    "    #Params\n",
    "    num_classes = 10\n",
    "    batch_size = 32\n",
    "    nb_epoch = 10\n",
    "\n",
    "    path='./tiny-imagenet-200'\n",
    "    X_train0,y_train,X_test0,y_test=load_images(path,num_classes)\n",
    "    \n",
    "    #keras2: img axes 64x64x3\n",
    "    i=0\n",
    "    X_train = np.zeros([num_classes*500,64,64,3],dtype='uint8')\n",
    "    X_test = np.zeros([num_classes*50,64,64,3],dtype='uint8')\n",
    "    for i in range(500):\n",
    "        X_train[0] = np.transpose(X_train0[i],(1,2,0))\n",
    "        X_test[0] = np.transpose(X_test0[i],(1,2,0))\n",
    "     \n",
    "    \n",
    "    #print X dimension\n",
    "    print('X_train shape:', X_train.shape)\n",
    "    print(X_train.shape[0], 'train samples')\n",
    "    print(X_test.shape[0], 'test samples')\n",
    "    \n",
    "    num_samples=len(X_train)\n",
    "\n",
    "    # input image dimensions\n",
    "    num_channels , img_rows, img_cols = X_train.shape[1], X_train.shape[2], X_train.shape[3]\n",
    "\n",
    "    #convert data type and normalize values to range [0,1]\n",
    "    X_train = X_train.astype('float32')\n",
    "    X_test = X_test.astype('float32')\n",
    "    X_train /= 255\n",
    "    X_test /= 255\n",
    "\n",
    "    # convert 1-D class vectors to N-D class matrices\n",
    "    Y_train = np_utils.to_categorical(y_train, num_classes)\n",
    "    Y_test = np_utils.to_categorical(y_test, num_classes)\n",
    "    \n",
    "    #define model architecture\n",
    "    model = Sequential()\n",
    "    #conv-spatial batch norm - relu #1 \n",
    "    model.add(Convolution2D(32,(5,5), padding='same', activation='relu',input_shape=(64,64,3)))\n",
    "    model.add(BatchNormalization(epsilon=1e-06, mode=0, axis=1, momentum=0.9))\n",
    "    model.add(MaxPooling2D(pool_size=(2,2)))\n",
    "    \n",
    "    model.add(Convolution2D(32,(3,3),  padding='same', activation='relu'))\n",
    "    model.add(BatchNormalization(epsilon=1e-06, mode=0, axis=1, momentum=0.9))\n",
    "    \n",
    "    \n",
    "    model.add(Flatten())\n",
    "    model.add(Dense(128, activation='relu'))\n",
    "    model.add(Dropout(0.5))\n",
    "    model.add(Dense(num_classes, activation='softmax'))\n",
    "\n",
    "\n",
    "    print()\n",
    "    print()\n",
    "    print('===========================')\n",
    "    print('Testing: with loss function hinge')\n",
    "    print('===========================')\n",
    "    print()\n",
    "\n",
    "\n",
    "    #compile model\n",
    "    model.compile(loss='categorical_crossentropy',\n",
    "                  optimizer='adam',\n",
    "                  metrics=['accuracy'])\n",
    "\n",
    "    #document\n",
    "    model.summary()\n",
    "    \n",
    "    #fit model\n",
    "    model.fit(X_train, Y_train, batch_size=batch_size, nb_epoch=nb_epoch,\n",
    "              verbose=1, validation_data=(X_test, Y_test))\n",
    "\n",
    "\n",
    "\n",
    "    #evaluate model\n",
    "    score = model.evaluate(X_test, Y_test, verbose=1)\n",
    "    print('Test score:', score[0])\n",
    "    print('Test accuracy:', score[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
